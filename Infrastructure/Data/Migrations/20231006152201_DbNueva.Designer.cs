// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    [Migration("20231006152201_DbNueva")]
    partial class DbNueva
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.models.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime>("Hora")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ID_Mascota")
                        .HasColumnType("int");

                    b.Property<int>("ID_Veterinario")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ID_Mascota");

                    b.HasIndex("ID_Veterinario");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("Core.models.EntradaMedicamento", b =>
                {
                    b.Property<int>("ID_Entrada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("date");

                    b.Property<int>("ID_Medicamento")
                        .HasColumnType("int");

                    b.Property<float>("PrecioCompra")
                        .HasPrecision(12, 3)
                        .HasColumnType("float");

                    b.HasKey("ID_Entrada");

                    b.HasIndex("ID_Medicamento");

                    b.ToTable("EntradasMedicamentos");
                });

            modelBuilder.Entity("Core.models.Especie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Especies");
                });

            modelBuilder.Entity("Core.models.Laboratorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Laboratorios");
                });

            modelBuilder.Entity("Core.models.Mascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<int>("ID_Especie")
                        .HasColumnType("int");

                    b.Property<int>("ID_Propietario")
                        .HasColumnType("int");

                    b.Property<int>("ID_Raza")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ID_Especie");

                    b.HasIndex("ID_Propietario");

                    b.HasIndex("ID_Raza");

                    b.ToTable("Mascotas");
                });

            modelBuilder.Entity("Core.models.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int");

                    b.Property<int>("ID_Laboratorio")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<float>("Precio")
                        .HasPrecision(12, 3)
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ID_Laboratorio");

                    b.ToTable("Medicamentos");
                });

            modelBuilder.Entity("Core.models.MedicamentoPoveedor", b =>
                {
                    b.Property<int>("ID_Proveedor")
                        .HasColumnType("int");

                    b.Property<int>("ID_Medicamento")
                        .HasColumnType("int");

                    b.HasKey("ID_Proveedor", "ID_Medicamento");

                    b.HasIndex("ID_Medicamento");

                    b.ToTable("MedicamentoPoveedor");
                });

            modelBuilder.Entity("Core.models.Propietario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ID_Usuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ID_Usuario")
                        .IsUnique();

                    b.ToTable("Propietarios");
                });

            modelBuilder.Entity("Core.models.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Core.models.Raza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ID_Especie")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ID_Especie");

                    b.ToTable("Razas");
                });

            modelBuilder.Entity("Core.models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.models.SalidaMedicamento", b =>
                {
                    b.Property<int>("ID_Salida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("date");

                    b.Property<int>("ID_Medicamento")
                        .HasColumnType("int");

                    b.Property<float>("PrecioVenta")
                        .HasPrecision(12, 3)
                        .HasColumnType("float");

                    b.HasKey("ID_Salida");

                    b.HasIndex("ID_Medicamento");

                    b.ToTable("SalidasMedicamentos");
                });

            modelBuilder.Entity("Core.models.TratamientoMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Dosis")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<DateTime>("FechaAdministracion")
                        .HasColumnType("date");

                    b.Property<int>("ID_Cita")
                        .HasColumnType("int");

                    b.Property<int>("ID_Medicamento")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ID_Cita");

                    b.HasIndex("ID_Medicamento");

                    b.ToTable("TratamientoMedicos");
                });

            modelBuilder.Entity("Core.models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("RolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Core.models.UsuarioRol", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("UsuariosRoles");
                });

            modelBuilder.Entity("Core.models.Veterinario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ID_Usuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ID_Usuario")
                        .IsUnique();

                    b.ToTable("Veterinarios");
                });

            modelBuilder.Entity("Core.models.Cita", b =>
                {
                    b.HasOne("Core.models.Mascota", "Mascota")
                        .WithMany("Citas")
                        .HasForeignKey("ID_Mascota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.Veterinario", "Veterinario")
                        .WithMany("Citas")
                        .HasForeignKey("ID_Veterinario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascota");

                    b.Navigation("Veterinario");
                });

            modelBuilder.Entity("Core.models.EntradaMedicamento", b =>
                {
                    b.HasOne("Core.models.Medicamento", "Medicamento")
                        .WithMany("EntradasMedicamento")
                        .HasForeignKey("ID_Medicamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("Core.models.Mascota", b =>
                {
                    b.HasOne("Core.models.Especie", "Especie")
                        .WithMany("Mascotas")
                        .HasForeignKey("ID_Especie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.Propietario", "Propietario")
                        .WithMany("Mascotas")
                        .HasForeignKey("ID_Propietario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.Raza", "Raza")
                        .WithMany("Mascotas")
                        .HasForeignKey("ID_Raza")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especie");

                    b.Navigation("Propietario");

                    b.Navigation("Raza");
                });

            modelBuilder.Entity("Core.models.Medicamento", b =>
                {
                    b.HasOne("Core.models.Laboratorio", "Laboratorio")
                        .WithMany("Medicamentos")
                        .HasForeignKey("ID_Laboratorio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratorio");
                });

            modelBuilder.Entity("Core.models.MedicamentoPoveedor", b =>
                {
                    b.HasOne("Core.models.Medicamento", "Medicamento")
                        .WithMany("MedicamentosProveedores")
                        .HasForeignKey("ID_Medicamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.Proveedor", "Proveedor")
                        .WithMany("MedicamentosProveedores")
                        .HasForeignKey("ID_Proveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Core.models.Propietario", b =>
                {
                    b.HasOne("Core.models.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("Core.models.Propietario", "ID_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.models.Raza", b =>
                {
                    b.HasOne("Core.models.Especie", "Especie")
                        .WithMany("Razas")
                        .HasForeignKey("ID_Especie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especie");
                });

            modelBuilder.Entity("Core.models.SalidaMedicamento", b =>
                {
                    b.HasOne("Core.models.Medicamento", "Medicamento")
                        .WithMany("SalidasMedicamento")
                        .HasForeignKey("ID_Medicamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("Core.models.TratamientoMedico", b =>
                {
                    b.HasOne("Core.models.Cita", "Cita")
                        .WithMany("TratamientosMedicos")
                        .HasForeignKey("ID_Cita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.Medicamento", "Medicamento")
                        .WithMany("TratamientosMedicos")
                        .HasForeignKey("ID_Medicamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("Core.models.Usuario", b =>
                {
                    b.HasOne("Core.models.Rol", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId");
                });

            modelBuilder.Entity("Core.models.UsuarioRol", b =>
                {
                    b.HasOne("Core.models.Rol", "Rol")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.Usuario", "Usuario")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.models.Veterinario", b =>
                {
                    b.HasOne("Core.models.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("Core.models.Veterinario", "ID_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.models.Cita", b =>
                {
                    b.Navigation("TratamientosMedicos");
                });

            modelBuilder.Entity("Core.models.Especie", b =>
                {
                    b.Navigation("Mascotas");

                    b.Navigation("Razas");
                });

            modelBuilder.Entity("Core.models.Laboratorio", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Core.models.Mascota", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("Core.models.Medicamento", b =>
                {
                    b.Navigation("EntradasMedicamento");

                    b.Navigation("MedicamentosProveedores");

                    b.Navigation("SalidasMedicamento");

                    b.Navigation("TratamientosMedicos");
                });

            modelBuilder.Entity("Core.models.Propietario", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("Core.models.Proveedor", b =>
                {
                    b.Navigation("MedicamentosProveedores");
                });

            modelBuilder.Entity("Core.models.Raza", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("Core.models.Rol", b =>
                {
                    b.Navigation("Usuarios");

                    b.Navigation("UsuariosRoles");
                });

            modelBuilder.Entity("Core.models.Usuario", b =>
                {
                    b.Navigation("UsuariosRoles");
                });

            modelBuilder.Entity("Core.models.Veterinario", b =>
                {
                    b.Navigation("Citas");
                });
#pragma warning restore 612, 618
        }
    }
}
